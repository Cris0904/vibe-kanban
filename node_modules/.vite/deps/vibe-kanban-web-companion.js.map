{
  "version": 3,
  "sources": ["../../point-in-polygon/flat.js", "../../point-in-polygon/nested.js", "../../point-in-polygon/index.js", "../../@floating-ui/react-dom-interactions/dist/floating-ui.react-dom-interactions.esm.js", "../../@floating-ui/core/dist/floating-ui.core.esm.development.js", "../../@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js", "../../htm/react/index.module.js", "../../htm/dist/htm.module.js", "../../vibe-kanban-web-companion/src/VibeKanbanWebCompanion.js", "../../vibe-kanban-web-companion/src/getDisplayNameFromReactInstance.js", "../../vibe-kanban-web-companion/src/getPathToSource.js", "../../vibe-kanban-web-companion/src/getPropsForInstance.js", "../../vibe-kanban-web-companion/src/getReactInstanceForElement.js", "../../vibe-kanban-web-companion/src/getReactInstancesForElement.js", "../../vibe-kanban-web-companion/src/getSourceForInstance.js", "../../vibe-kanban-web-companion/src/getUrl.js", "../../vibe-kanban-web-companion/src/index.js"],
  "sourcesContent": ["module.exports = function pointInPolygonFlat (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = (end-start)/2;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[start+i*2+0], yi = vs[start+i*2+1];\n        var xj = vs[start+j*2+0], yj = vs[start+j*2+1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n", "// ray-casting algorithm based on\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\nmodule.exports = function pointInPolygonNested (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = end - start;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[i+start][0], yi = vs[i+start][1];\n        var xj = vs[j+start][0], yj = vs[j+start][1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n", "var pointInPolygonFlat = require('./flat.js')\nvar pointInPolygonNested = require('./nested.js')\n\nmodule.exports = function pointInPolygon (point, vs, start, end) {\n    if (vs.length > 0 && Array.isArray(vs[0])) {\n        return pointInPolygonNested(point, vs, start, end);\n    } else {\n        return pointInPolygonFlat(point, vs, start, end);\n    }\n}\nmodule.exports.nested = pointInPolygonNested\nmodule.exports.flat = pointInPolygonFlat\n", "import * as React from 'react';\nimport React__default, { useLayoutEffect, useEffect, useContext, useMemo, useRef, useCallback, useState, createContext, forwardRef, cloneElement } from 'react';\nimport { getOverflowAncestors, useFloating as useFloating$1 } from '@floating-ui/react-dom';\nexport * from '@floating-ui/react-dom';\nimport pointInPolygon from 'point-in-polygon';\nimport { createPortal } from 'react-dom';\nimport { hideOthers } from 'aria-hidden';\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\nfunction createPubSub() {\n  const map = new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n\n      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(handler => handler(data));\n    },\n\n    on(event, listener) {\n      map.set(event, [...(map.get(event) || []), listener]);\n    },\n\n    off(event, listener) {\n      map.set(event, (map.get(event) || []).filter(l => l !== listener));\n    }\n\n  };\n}\n\nlet serverHandoffComplete = false;\nlet count = 0;\n\nconst genId = () => \"floating-ui-\" + count++;\n\nfunction useFloatingId() {\n  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  React.useEffect(() => {\n    if (!serverHandoffComplete) {\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id;\n} // `toString()` prevents bundlers from trying to `import { useId } from 'react'`\n\n\nconst useReactId = React[/*#__PURE__*/'useId'.toString()];\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/useId\n */\n\nconst useId = useReactId != null ? useReactId : useFloatingId;\n\nconst FloatingNodeContext = /*#__PURE__*/createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/createContext(null);\nconst useFloatingParentNodeId = () => {\n  var _useContext$id, _useContext;\n\n  return (_useContext$id = (_useContext = useContext(FloatingNodeContext)) == null ? void 0 : _useContext.id) != null ? _useContext$id : null;\n};\nconst useFloatingTree = () => useContext(FloatingTreeContext);\n/**\n * Registers a node into the floating tree, returning its id.\n */\n\nconst useFloatingNodeId = () => {\n  const id = useId();\n  const tree = useFloatingTree();\n  const parentId = useFloatingParentNodeId();\n  index(() => {\n    const node = {\n      id,\n      parentId\n    };\n    tree == null ? void 0 : tree.addNode(node);\n    return () => {\n      tree == null ? void 0 : tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n};\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\n\nconst FloatingNode = _ref => {\n  let {\n    children,\n    id\n  } = _ref;\n  const parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/React__default.createElement(FloatingNodeContext.Provider, {\n    value: useMemo(() => ({\n      id,\n      parentId\n    }), [id, parentId])\n  }, children);\n};\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM (i.e. portalled to a common node, rather than their\n * respective parent).\n * @see https://floating-ui.com/docs/FloatingTree\n */\n\nconst FloatingTree = _ref2 => {\n  let {\n    children\n  } = _ref2;\n  const nodesRef = useRef([]);\n  const addNode = useCallback(node => {\n    nodesRef.current = [...nodesRef.current, node];\n  }, []);\n  const removeNode = useCallback(node => {\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\n  }, []);\n  const events = useState(() => createPubSub())[0];\n  return /*#__PURE__*/React__default.createElement(FloatingTreeContext.Provider, {\n    value: useMemo(() => ({\n      nodesRef,\n      addNode,\n      removeNode,\n      events\n    }), [nodesRef, addNode, removeNode, events])\n  }, children);\n};\n\nfunction mergeProps(userProps, propsList, elementKey) {\n  const fnsMap = {};\n  return { ...(elementKey === 'floating' && {\n      tabIndex: -1\n    }),\n    ...userProps,\n    ...propsList.map(value => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n\n      Object.entries(props).forEach(_ref => {\n        let [key, value] = _ref;\n\n        if (key.indexOf('on') === 0) {\n          if (!fnsMap[key]) {\n            fnsMap[key] = [];\n          }\n\n          if (typeof value === 'function') {\n            fnsMap[key].push(value);\n          }\n\n          acc[key] = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            fnsMap[key].forEach(fn => fn(...args));\n          };\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\n\nconst useInteractions = function (propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n\n  return {\n    getReferenceProps: userProps => mergeProps(userProps, propsList, 'reference'),\n    getFloatingProps: userProps => mergeProps(userProps, propsList, 'floating'),\n    getItemProps: userProps => mergeProps(userProps, propsList, 'item')\n  };\n};\n\nfunction getDocument(floating) {\n  var _floating$ownerDocume;\n\n  return (_floating$ownerDocume = floating == null ? void 0 : floating.ownerDocument) != null ? _floating$ownerDocume : document;\n}\n\nfunction getWindow(value) {\n  var _getDocument$defaultV;\n\n  return (_getDocument$defaultV = getDocument(value).defaultView) != null ? _getDocument$defaultV : window;\n}\n\nfunction isElement(value) {\n  return value ? value instanceof getWindow(value).Element : false;\n}\nfunction isHTMLElement(value) {\n  return value ? value instanceof getWindow(value).HTMLElement : false;\n}\n\nfunction getChildren(tree, id) {\n  var _tree$nodesRef$curren;\n\n  let allChildren = (_tree$nodesRef$curren = tree == null ? void 0 : tree.nodesRef.current.filter(node => {\n    var _node$context;\n\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  })) != null ? _tree$nodesRef$curren : [];\n  let currentChildren = allChildren;\n\n  while (currentChildren.length) {\n    var _tree$nodesRef$curren2;\n\n    currentChildren = (_tree$nodesRef$curren2 = tree == null ? void 0 : tree.nodesRef.current.filter(node => {\n      var _currentChildren;\n\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\n        var _node$context2;\n\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    })) != null ? _tree$nodesRef$curren2 : [];\n    allChildren = allChildren.concat(currentChildren);\n  }\n\n  return allChildren;\n}\n\nfunction safePolygon(_temp) {\n  let {\n    restMs = 0,\n    buffer = 1,\n    debug = null\n  } = _temp === void 0 ? {} : _temp;\n  let timeoutId;\n  return _ref => {\n    let {\n      x,\n      y,\n      placement,\n      refs,\n      onClose,\n      nodeId,\n      tree\n    } = _ref;\n    return function onPointerMove(event) {\n      var _refs$floating$curren;\n\n      clearTimeout(timeoutId);\n\n      if (event.pointerType && event.pointerType !== 'mouse') {\n        return;\n      }\n\n      const {\n        target,\n        clientX,\n        clientY\n      } = event;\n      const targetNode = target;\n\n      if (event.type === 'pointermove' && isElement(refs.reference.current) && refs.reference.current.contains(targetNode) || (_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(targetNode)) {\n        return;\n      } // If any child has a menu open, abort\n\n\n      if (tree && getChildren(tree, nodeId).some(_ref2 => {\n        let {\n          context\n        } = _ref2;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      }\n\n      if (!refs.reference.current || !refs.floating.current || placement == null || x == null || y == null) {\n        return;\n      }\n\n      const refRect = refs.reference.current.getBoundingClientRect();\n      const rect = refs.floating.current.getBoundingClientRect();\n      const side = placement.split('-')[0];\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2; // Within the rectangular trough between the two elements\n\n      switch (side) {\n        case 'top':\n          if (clientX >= rect.left && clientX <= rect.right && clientY >= rect.bottom && clientY <= refRect.top) {\n            return;\n          }\n\n          break;\n\n        case 'bottom':\n          if (clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom && clientY <= rect.top) {\n            return;\n          }\n\n          break;\n\n        case 'left':\n          if (clientX >= rect.right && clientX <= refRect.left && clientY >= rect.left && clientY <= rect.right) {\n            return;\n          }\n\n          break;\n\n        case 'right':\n          if (clientX >= rect.right && clientX <= refRect.left && clientY >= rect.right && clientY <= refRect.left) {\n            return;\n          }\n\n          break;\n      }\n\n      function getPolygon(_ref3) {\n        let [x, y] = _ref3;\n        const isFloatingWider = rect.width > refRect.width;\n        const isFloatingTaller = rect.height > refRect.height;\n\n        switch (side) {\n          case 'top':\n            {\n              const cursorPointOne = [isFloatingWider ? x : cursorLeaveFromRight ? x + buffer : x - buffer, y + buffer];\n              const cursorPointTwo = [isFloatingWider ? x : cursorLeaveFromRight ? x - buffer : x + buffer, y + buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n\n              if (cursorLeaveFromRight) {\n                return [cursorPointOne, cursorPointTwo, ...commonPoints];\n              }\n\n              return [cursorPointOne, ...commonPoints, cursorPointTwo];\n            }\n\n          case 'bottom':\n            {\n              const cursorPointOne = [isFloatingWider ? x : cursorLeaveFromRight ? x + buffer : x - buffer, y - buffer];\n              const cursorPointTwo = [isFloatingWider ? x : cursorLeaveFromRight ? x - buffer : x + buffer, y - buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n\n              if (cursorLeaveFromRight) {\n                return [cursorPointOne, cursorPointTwo, ...commonPoints];\n              }\n\n              return [cursorPointOne, ...commonPoints, cursorPointTwo];\n            }\n\n          case 'left':\n            {\n              const cursorPointOne = [x + buffer, isFloatingTaller ? y : cursorLeaveFromBottom ? y - buffer : y + buffer];\n              const cursorPointTwo = [x + buffer, isFloatingTaller ? y : cursorLeaveFromBottom ? y + buffer : y - buffer];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n\n              if (cursorLeaveFromBottom) {\n                return [cursorPointOne, ...commonPoints, cursorPointTwo];\n              }\n\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\n            }\n\n          case 'right':\n            {\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y : cursorLeaveFromBottom ? y + buffer : y - buffer];\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y : cursorLeaveFromBottom ? y - buffer : y + buffer];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n\n              if (cursorLeaveFromBottom) {\n                return [cursorPointOne, cursorPointTwo, ...commonPoints];\n              }\n\n              return [cursorPointOne, ...commonPoints, cursorPointTwo];\n            }\n        }\n      }\n\n      const poly = getPolygon([x, y]);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        debug == null ? void 0 : debug(poly.slice(0, 4).join(', '));\n      }\n\n      if (!pointInPolygon([clientX, clientY], poly)) {\n        clearTimeout(timeoutId);\n        onClose();\n      } else if (restMs) {\n        timeoutId = setTimeout(onClose, restMs);\n      }\n    };\n  };\n}\n\nconst DEFAULT_ID = 'floating-ui-root';\n/**\n * Portals your floating element outside of the main app node.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\n\nconst FloatingPortal = _ref => {\n  let {\n    children,\n    id = DEFAULT_ID\n  } = _ref;\n  const [mounted, setMounted] = useState(false);\n  const portalRef = useRef(null);\n  index(() => {\n    const root = document.getElementById(id);\n\n    if (root) {\n      portalRef.current = root;\n    } else {\n      portalRef.current = document.createElement('div');\n      portalRef.current.id = id;\n    }\n\n    const el = portalRef.current;\n\n    if (!document.body.contains(el)) {\n      document.body.appendChild(el);\n    }\n\n    setMounted(true);\n  }, [id]);\n\n  if (mounted && portalRef.current) {\n    return /*#__PURE__*/createPortal(children, portalRef.current);\n  }\n\n  return null;\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst identifier = 'data-floating-ui-scroll-lock';\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\n\nconst FloatingOverlay = /*#__PURE__*/forwardRef(function FloatingOverlay(_ref, ref) {\n  let {\n    lockScroll = false,\n    ...rest\n  } = _ref;\n  index(() => {\n    if (!lockScroll) {\n      return;\n    }\n\n    const scrollX = window.pageXOffset;\n    const scrollY = window.pageYOffset; // RTL <body> scrollbar\n\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n    const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n    const alreadyLocked = document.body.hasAttribute(identifier);\n\n    if (alreadyLocked) {\n      return;\n    }\n\n    Object.assign(document.body.style, {\n      position: 'fixed',\n      overflow: 'hidden',\n      top: \"-\" + scrollY + \"px\",\n      left: \"-\" + scrollX + \"px\",\n      right: '0',\n      [paddingProp]: scrollbarWidth + \"px\"\n    });\n    document.body.setAttribute(identifier, '');\n    return () => {\n      Object.assign(document.body.style, {\n        position: '',\n        overflow: '',\n        top: '',\n        left: '',\n        right: '',\n        [paddingProp]: ''\n      });\n      document.body.removeAttribute(identifier);\n      window.scrollTo(scrollX, scrollY);\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: {\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...rest.style\n    }\n  }));\n});\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nfunction useLatestRef(value) {\n  const ref = useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nfunction focus$1(el) {\n  requestAnimationFrame(() => {\n    el == null ? void 0 : el.focus();\n  });\n}\n\nconst SELECTOR = \"input:not([type='hidden']):not([disabled]),select:not([disabled]),\" + 'textarea:not([disabled]),a[href],button:not([disabled]),[tabindex],' + 'iframe,object,embed,area[href],audio[controls],video[controls],' + \"[contenteditable]:not([contenteditable='false'])\";\nconst FocusGuard = /*#__PURE__*/forwardRef(function FocusGuard(props, ref) {\n  return /*#__PURE__*/React__default.createElement(\"span\", _extends({}, props, {\n    ref: ref,\n    tabIndex: 0,\n    style: {\n      position: 'fixed',\n      opacity: '0',\n      pointerEvents: 'none',\n      outline: '0'\n    }\n  }));\n});\n\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(_ref) {\n  let {\n    context: {\n      refs,\n      nodeId,\n      onOpenChange\n    },\n    children,\n    order = ['content'],\n    endGuard = true,\n    preventTabbing = false,\n    initialFocus = 0,\n    returnFocus = true,\n    modal = true\n  } = _ref;\n  const orderRef = useLatestRef(order);\n  const onOpenChangeRef = useLatestRef(onOpenChange);\n  const tree = useFloatingTree();\n  const getTabbableElements = useCallback(() => {\n    return orderRef.current.map(type => {\n      if (isHTMLElement(refs.reference.current) && type === 'reference') {\n        return refs.reference.current;\n      }\n\n      if (refs.floating.current && type === 'floating') {\n        return refs.floating.current;\n      }\n\n      if (type === 'content') {\n        var _refs$floating$curren, _refs$floating$curren2;\n\n        return Array.from((_refs$floating$curren = (_refs$floating$curren2 = refs.floating.current) == null ? void 0 : _refs$floating$curren2.querySelectorAll(SELECTOR)) != null ? _refs$floating$curren : []);\n      }\n\n      return null;\n    }).flat().filter(el => {\n      if (el === refs.floating.current || el === refs.reference.current) {\n        return true;\n      }\n\n      if (isHTMLElement(el)) {\n        var _el$getAttribute;\n\n        const tabIndex = (_el$getAttribute = el.getAttribute('tabindex')) != null ? _el$getAttribute : '0';\n        return tabIndex[0].trim() !== '-';\n      }\n    });\n  }, [orderRef, refs.floating, refs.reference]);\n  useEffect(() => {\n    // If the floating element has no focusable elements inside it, fallback\n    // to focusing the floating element and preventing tab navigation\n    const noTabbableContentElements = getTabbableElements().filter(el => el !== refs.floating.current && // @ts-expect-error\n    el !== refs.reference.current).length === 0;\n\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        if (preventTabbing || noTabbableContentElements) {\n          stopEvent(event);\n        }\n\n        const els = getTabbableElements();\n\n        if (orderRef.current[0] === 'reference' && event.target === refs.reference.current) {\n          stopEvent(event);\n\n          if (event.shiftKey) {\n            focus$1(els[els.length - 1]);\n          } else {\n            focus$1(els[1]);\n          }\n        }\n\n        if (orderRef.current[1] === 'floating' && event.target === refs.floating.current && event.shiftKey) {\n          stopEvent(event);\n          focus$1(els[0]);\n        }\n      }\n    }\n\n    const doc = getDocument(refs.floating.current);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [preventTabbing, getTabbableElements, orderRef, refs.floating, refs.reference]);\n  useEffect(() => {\n    function onFloatingFocusOut(event) {\n      var _refs$floating$curren3;\n\n      const target = event.relatedTarget;\n\n      if (!((_refs$floating$curren3 = refs.floating.current) != null && _refs$floating$curren3.contains(target)) && isElement(refs.reference.current) && !refs.reference.current.contains(target) && !(tree && getChildren(tree, nodeId).some(child => {\n        var _child$context, _child$context$refs$f;\n\n        return (_child$context = child.context) == null ? void 0 : (_child$context$refs$f = _child$context.refs.floating.current) == null ? void 0 : _child$context$refs$f.contains(target);\n      }))) {\n        onOpenChangeRef.current(false);\n      }\n    }\n\n    const floating = refs.floating.current;\n    const reference = refs.reference.current;\n\n    if (floating && isHTMLElement(reference)) {\n      !modal && floating.addEventListener('focusout', onFloatingFocusOut);\n      const cleanup = modal ? hideOthers(floating) : null;\n      return () => {\n        !modal && floating.removeEventListener('focusout', onFloatingFocusOut);\n        cleanup == null ? void 0 : cleanup();\n      };\n    }\n  }, [nodeId, tree, modal, onOpenChangeRef, getTabbableElements, initialFocus, refs.floating, refs.reference]);\n  useEffect(() => {\n    var _getDocument$activeEl;\n\n    if (preventTabbing) {\n      return;\n    }\n\n    const floating = refs.floating.current;\n    const previouslyFocusedElement = (_getDocument$activeEl = getDocument(floating).activeElement) != null ? _getDocument$activeEl : document.activeElement;\n\n    if (typeof initialFocus === 'number') {\n      var _getTabbableElements$;\n\n      focus$1((_getTabbableElements$ = getTabbableElements()[initialFocus]) != null ? _getTabbableElements$ : floating);\n    } else if (isHTMLElement(initialFocus == null ? void 0 : initialFocus.current)) {\n      var _initialFocus$current;\n\n      focus$1((_initialFocus$current = initialFocus.current) != null ? _initialFocus$current : floating);\n    }\n\n    return () => {\n      if (returnFocus && isHTMLElement(previouslyFocusedElement)) {\n        focus$1(previouslyFocusedElement);\n      }\n    };\n  }, [preventTabbing, getTabbableElements, initialFocus, modal, returnFocus, refs.floating]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, modal && /*#__PURE__*/React__default.createElement(FocusGuard, {\n    onFocus: event => {\n      stopEvent(event);\n      const els = getTabbableElements();\n\n      if (order[0] === 'reference') {\n        focus$1(els[0]);\n      } else {\n        focus$1(els[els.length - 1]);\n      }\n    }\n  }), /*#__PURE__*/cloneElement(children, order.includes('floating') ? {\n    tabIndex: 0\n  } : {}), modal && endGuard && /*#__PURE__*/React__default.createElement(FocusGuard, {\n    onFocus: event => {\n      stopEvent(event);\n      focus$1(getTabbableElements()[0]);\n    }\n  }));\n}\n\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && pointerType !== 'mouse') {\n    return 0;\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return value == null ? void 0 : value[prop];\n}\n\n/**\n * Adds hover event listeners that change the open state, like CSS :hover.\n * @see https://floating-ui.com/docs/useHover\n */\nconst useHover = function (context, _temp) {\n  let {\n    enabled = true,\n    delay = 0,\n    handleClose = null,\n    mouseOnly = false,\n    restMs = 0\n  } = _temp === void 0 ? {} : _temp;\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    refs\n  } = context;\n  const tree = useFloatingTree();\n  const onOpenChangeRef = useLatestRef(onOpenChange);\n  const handleCloseRef = useLatestRef(handleClose);\n  const pointerTypeRef = useRef();\n  const timeoutRef = useRef();\n  const handlerRef = useRef();\n  const restTimeoutRef = useRef();\n  const blockMouseMoveRef = useRef(true);\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (!open) {\n      pointerTypeRef.current = undefined;\n    }\n  });\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    function onDismiss() {\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      blockMouseMoveRef.current = true;\n    }\n\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [enabled, events, refs.floating]);\n  useEffect(() => {\n    if (!enabled || !handleCloseRef.current) {\n      return;\n    }\n\n    function onLeave() {\n      var _dataRef$current$open;\n\n      if ((_dataRef$current$open = dataRef.current.openEvent) != null && _dataRef$current$open.type.includes('mouse')) {\n        onOpenChangeRef.current(false);\n      }\n    }\n\n    const html = getDocument(refs.floating.current).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return () => {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [refs.floating, onOpenChangeRef, enabled, handleCloseRef, dataRef]);\n  const closeWithDelay = useCallback(function (runElseBranch) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n\n    if (delay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => onOpenChangeRef.current(false), getDelay(delay, 'close', pointerTypeRef.current));\n    } else if (runElseBranch) {\n      onOpenChangeRef.current(false);\n    }\n  }, [delay, onOpenChangeRef]);\n  const cleanupPointerMoveHandler = useCallback(() => {\n    if (handlerRef.current) {\n      getDocument(refs.floating.current).removeEventListener('pointermove', handlerRef.current);\n      handlerRef.current = undefined;\n    }\n  }, [refs.floating]);\n  useEffect(() => {\n    if (!open) {\n      cleanupPointerMoveHandler();\n    }\n  }, [open, enabled, cleanupPointerMoveHandler]); // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n\n      if (open || mouseOnly && pointerTypeRef.current !== 'mouse' || restMs > 0 && getDelay(delay, 'open') === 0) {\n        return;\n      }\n\n      dataRef.current.openEvent = event;\n\n      if (delay) {\n        timeoutRef.current = setTimeout(() => {\n          onOpenChangeRef.current(true);\n        }, getDelay(delay, 'open', pointerTypeRef.current));\n      } else {\n        onOpenChangeRef.current(true);\n      }\n    }\n\n    function onMouseLeave(event) {\n      var _dataRef$current$open2, _dataRef$current$open3;\n\n      if (((_dataRef$current$open2 = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open2.type) === 'click' || ((_dataRef$current$open3 = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open3.type) === 'pointerdown') {\n        return;\n      }\n\n      const doc = getDocument(refs.floating.current);\n      clearTimeout(restTimeoutRef.current);\n\n      if (handleCloseRef.current) {\n        clearTimeout(timeoutRef.current);\n        handlerRef.current && doc.removeEventListener('pointermove', handlerRef.current);\n        handlerRef.current = handleCloseRef.current({ ...context,\n          tree,\n          x: event.clientX,\n          y: event.clientY,\n\n          onClose() {\n            cleanupPointerMoveHandler();\n            closeWithDelay();\n          }\n\n        });\n        doc.addEventListener('pointermove', handlerRef.current);\n        return;\n      }\n\n      closeWithDelay();\n    }\n\n    const reference = refs.reference.current;\n\n    if (isElement(reference)) {\n      reference.addEventListener('mouseenter', onMouseEnter);\n      reference.addEventListener('mouseleave', onMouseLeave);\n      return () => {\n        reference.removeEventListener('mouseenter', onMouseEnter);\n        reference.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [enabled, closeWithDelay, context, delay, handleCloseRef, dataRef, mouseOnly, onOpenChangeRef, open, tree, restMs, cleanupPointerMoveHandler, refs.reference, refs.floating]);\n\n  if (!enabled) {\n    return {};\n  }\n\n  function setPointerRef(event) {\n    pointerTypeRef.current = event.pointerType;\n  }\n\n  return {\n    reference: {\n      onPointerDown: setPointerRef,\n      onPointerEnter: setPointerRef,\n\n      onMouseMove() {\n        if (open || restMs === 0) {\n          return;\n        }\n\n        clearTimeout(restTimeoutRef.current);\n        restTimeoutRef.current = setTimeout(() => {\n          if (!blockMouseMoveRef.current) {\n            onOpenChange(true);\n          }\n        }, restMs);\n      }\n\n    },\n    floating: {\n      onMouseEnter() {\n        clearTimeout(timeoutRef.current);\n      },\n\n      onMouseLeave: () => closeWithDelay(false)\n    }\n  };\n};\n\nconst FloatingDelayGroupContext = /*#__PURE__*/createContext({\n  delay: 1000,\n  initialDelay: 1000,\n  currentId: null,\n  setCurrentId: () => {},\n  setState: () => {}\n});\nconst useDelayGroupContext = () => useContext(FloatingDelayGroupContext);\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\n\nconst FloatingDelayGroup = _ref => {\n  let {\n    children,\n    delay\n  } = _ref;\n  const [state, setState] = useState({\n    delay,\n    initialDelay: delay,\n    currentId: null\n  });\n  const setCurrentId = useCallback(currentId => {\n    setState(state => ({ ...state,\n      currentId\n    }));\n  }, []);\n  return /*#__PURE__*/React__default.createElement(FloatingDelayGroupContext.Provider, {\n    value: useMemo(() => ({ ...state,\n      setState,\n      setCurrentId\n    }), [state, setState, setCurrentId])\n  }, children);\n};\nconst useDelayGroup = (_ref2, _ref3) => {\n  let {\n    open,\n    onOpenChange\n  } = _ref2;\n  let {\n    id\n  } = _ref3;\n  const {\n    currentId,\n    initialDelay,\n    setState\n  } = useDelayGroupContext();\n  const onOpenChangeRef = useLatestRef(onOpenChange);\n  useEffect(() => {\n    if (currentId && onOpenChangeRef.current) {\n      setState(state => ({ ...state,\n        delay: {\n          open: 1,\n          close: getDelay(initialDelay, 'close')\n        }\n      }));\n\n      if (currentId !== id) {\n        onOpenChangeRef.current(false);\n      }\n    }\n  }, [id, onOpenChangeRef, setState, currentId, initialDelay]);\n  useEffect(() => {\n    if (!open && currentId === id && onOpenChangeRef.current) {\n      onOpenChangeRef.current(false);\n      setState(state => ({ ...state,\n        delay: initialDelay,\n        currentId: null\n      }));\n    }\n  }, [open, setState, currentId, id, onOpenChangeRef, initialDelay]);\n};\n\n/**\n * Adds relevant screen reader props for a given element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nconst useRole = function (_ref, _temp) {\n  let {\n    open\n  } = _ref;\n  let {\n    enabled = true,\n    role = 'dialog'\n  } = _temp === void 0 ? {} : _temp;\n  const rootId = useId();\n  const referenceId = useId();\n  const floatingProps = {\n    id: rootId,\n    role\n  };\n\n  if (!enabled) {\n    return {};\n  }\n\n  if (role === 'tooltip') {\n    return {\n      reference: {\n        'aria-describedby': open ? rootId : undefined\n      },\n      floating: floatingProps\n    };\n  }\n\n  return {\n    reference: {\n      'aria-expanded': open ? 'true' : 'false',\n      'aria-haspopup': role,\n      'aria-controls': open ? rootId : undefined,\n      ...(role === 'listbox' && {\n        role: 'combobox'\n      }),\n      ...(role === 'menu' && {\n        id: referenceId\n      })\n    },\n    floating: { ...floatingProps,\n      ...(role === 'menu' && {\n        'aria-labelledby': referenceId\n      })\n    }\n  };\n};\n\n/**\n * Adds click event listeners that change the open state (toggle behavior).\n * @see https://floating-ui.com/docs/useClick\n */\nconst useClick = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    dataRef\n  } = _ref;\n  let {\n    enabled = true,\n    pointerDown = false,\n    toggle = true\n  } = _temp === void 0 ? {} : _temp;\n  const pointerTypeRef = useRef();\n\n  if (!enabled) {\n    return {};\n  }\n\n  return {\n    reference: { ...(pointerDown && {\n        onPointerDown(event) {\n          pointerTypeRef.current = event.pointerType;\n\n          if (open) {\n            var _dataRef$current$open;\n\n            if (toggle && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'pointerdown') {\n              onOpenChange(false);\n            }\n          } else {\n            onOpenChange(true);\n          }\n\n          dataRef.current.openEvent = event.nativeEvent;\n        }\n\n      }),\n\n      onClick(event) {\n        if (pointerDown && pointerTypeRef.current) {\n          pointerTypeRef.current = undefined;\n          return;\n        }\n\n        if (open) {\n          var _dataRef$current$open2;\n\n          if (toggle && ((_dataRef$current$open2 = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open2.type) === 'click') {\n            onOpenChange(false);\n          }\n        } else {\n          onOpenChange(true);\n        }\n\n        dataRef.current.openEvent = event.nativeEvent;\n      }\n\n    }\n  };\n};\n\n/**\n * Adds listeners that dismiss (close) the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nconst useDismiss = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    refs,\n    events,\n    nodeId\n  } = _ref;\n  let {\n    enabled = true,\n    escapeKey = true,\n    outsidePointerDown = true,\n    referencePointerDown = false,\n    ancestorScroll = false,\n    bubbles = true\n  } = _temp === void 0 ? {} : _temp;\n  const tree = useFloatingTree();\n  const onOpenChangeRef = useLatestRef(onOpenChange);\n  const isFocusInsideFloating = useCallback(() => {\n    var _refs$floating$curren;\n\n    return (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.contains(getDocument(refs.floating.current).activeElement);\n  }, [refs.floating]);\n  const focusReference = useCallback(() => {\n    if (isHTMLElement(refs.reference.current)) {\n      refs.reference.current.focus();\n    }\n  }, [refs.reference]);\n  useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n\n    function onKeyDown(event) {\n      if (event.key === 'Escape') {\n        if (!bubbles && !isFocusInsideFloating()) {\n          return;\n        }\n\n        events.emit('dismiss');\n        onOpenChangeRef.current(false);\n        focusReference();\n      }\n    }\n\n    function onPointerDown(event) {\n      var _refs$floating$curren2;\n\n      const targetIsInsideChildren = tree && getChildren(tree, nodeId).some(node => {\n        var _node$context, _node$context$refs$fl;\n\n        return (_node$context = node.context) == null ? void 0 : (_node$context$refs$fl = _node$context.refs.floating.current) == null ? void 0 : _node$context$refs$fl.contains(event.target);\n      });\n\n      if ((_refs$floating$curren2 = refs.floating.current) != null && _refs$floating$curren2.contains(event.target) || isElement(refs.reference.current) && refs.reference.current.contains(event.target) || targetIsInsideChildren) {\n        return;\n      }\n\n      if (!bubbles && !isFocusInsideFloating()) {\n        return;\n      }\n\n      events.emit('dismiss');\n      onOpenChangeRef.current(false);\n      focusReference();\n    }\n\n    function onScroll() {\n      onOpenChangeRef.current(false);\n    }\n\n    const doc = getDocument(refs.floating.current);\n    escapeKey && doc.addEventListener('keydown', onKeyDown); // Use `mousedown` instead of `pointerdown` as it acts more like a click\n    // on touch devices than a `touchstart` (which can result in accidental\n    // dismissals too easily.)\n\n    outsidePointerDown && doc.addEventListener('mousedown', onPointerDown);\n    const ancestors = (ancestorScroll ? [...(isElement(refs.reference.current) ? getOverflowAncestors(refs.reference.current) : []), ...(isElement(refs.floating.current) ? getOverflowAncestors(refs.floating.current) : [])] : []).filter(ancestor => {\n      var _doc$defaultView;\n\n      return (// Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n        ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport)\n      );\n    });\n    ancestors.forEach(ancestor => ancestor.addEventListener('scroll', onScroll, {\n      passive: true\n    }));\n    return () => {\n      escapeKey && doc.removeEventListener('keydown', onKeyDown);\n      outsidePointerDown && doc.removeEventListener('mousedown', onPointerDown);\n      ancestors.forEach(ancestor => ancestor.removeEventListener('scroll', onScroll));\n    };\n  }, [escapeKey, outsidePointerDown, events, tree, nodeId, open, onOpenChangeRef, focusReference, ancestorScroll, enabled, bubbles, isFocusInsideFloating, refs.floating, refs.reference]);\n\n  if (!enabled) {\n    return {};\n  }\n\n  return {\n    reference: {\n      onPointerDown() {\n        if (referencePointerDown) {\n          events.emit('dismiss');\n          onOpenChange(false);\n        }\n      }\n\n    }\n  };\n};\n\n/**\n * Adds focus event listeners that change the open state, like CSS :focus.\n * @see https://floating-ui.com/docs/useFocus\n */\nconst useFocus = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    dataRef,\n    refs,\n    events\n  } = _ref;\n  let {\n    enabled = true,\n    keyboardOnly = true\n  } = _temp === void 0 ? {} : _temp;\n  const blockFocusRef = useRef(false);\n  useEffect(() => {\n    var _doc$defaultView;\n\n    if (!enabled) {\n      return;\n    }\n\n    const doc = getDocument(refs.floating.current);\n    const win = (_doc$defaultView = doc.defaultView) != null ? _doc$defaultView : window;\n\n    function onBlur() {\n      blockFocusRef.current = !open;\n    }\n\n    function onFocus() {\n      setTimeout(() => {\n        blockFocusRef.current = false;\n      });\n    }\n\n    win.addEventListener('focus', onFocus);\n    win.addEventListener('blur', onBlur);\n    return () => {\n      win.removeEventListener('focus', onFocus);\n      win.removeEventListener('blur', onBlur);\n    };\n  }, [refs.floating, open, enabled]);\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    function onDismiss() {\n      blockFocusRef.current = true;\n    }\n\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [events, enabled]);\n\n  if (!enabled) {\n    return {};\n  }\n\n  return {\n    reference: {\n      onPointerDown(_ref2) {\n        let {\n          pointerType\n        } = _ref2;\n        blockFocusRef.current = !!(pointerType && keyboardOnly);\n      },\n\n      onFocus(event) {\n        var _dataRef$current$open, _refs$reference$curre, _dataRef$current$open2;\n\n        // Note: due to the `window` focus/blur listeners, switching between\n        // DevTools touch/normal mode may cause this to fail on the first\n        // focus of the window/touch of the element as it gets set to `false`.\n        if (blockFocusRef.current) {\n          return;\n        } // Dismiss with click should ignore the subsequent `focus` trigger, but\n        // only if the click originated inside the reference element.\n\n\n        if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && isElement(refs.reference.current) && (_refs$reference$curre = refs.reference.current) != null && _refs$reference$curre.contains((_dataRef$current$open2 = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open2.target)) {\n          return;\n        }\n\n        dataRef.current.openEvent = event.nativeEvent;\n        onOpenChange(true);\n      },\n\n      onBlur(event) {\n        var _refs$floating$curren;\n\n        const target = event.relatedTarget; // When focusing the reference element (e.g. regular click), then\n        // clicking into the floating element, prevent it from hiding.\n        // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n\n        if ((_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(target) || isElement(refs.reference.current) && refs.reference.current.contains(target)) {\n          return;\n        }\n\n        blockFocusRef.current = false;\n        onOpenChange(false);\n      }\n\n    }\n  };\n};\n\nconst FOCUSABLE_ELEMENT_SELECTOR = 'a[href],area[href],input:not([disabled]),select:not([disabled]),textarea:not([disabled]),button:not([disabled]),iframe,object,embed,*[tabindex],*[contenteditable]';\nconst DEFAULT_ORDER = ['content'];\n\n// When working with nested elements, we need to let the rendering occur before\n// attempting focus. This fixes unwanted scrolling to the bottom of the document\nfunction focus(el) {\n  requestAnimationFrame(() => {\n    el == null ? void 0 : el.focus();\n  });\n}\n/**\n * @deprecated Use `<FloatingFocusManager />` instead.\n */\n\n\nconst useFocusTrap = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    refs,\n    nodeId\n  } = _ref;\n  let {\n    enabled = true,\n    initialContentFocus = 0,\n    order = DEFAULT_ORDER,\n    modal = true,\n    inert = false\n  } = _temp === void 0 ? {} : _temp;\n  const initializedRef = useRef(false);\n  const beforeRef = useRef(null);\n  const afterRef = useRef(null);\n  const modalRef = useLatestRef(modal);\n  const orderRef = useLatestRef(order);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (modal && order.includes('reference')) {\n      console.warn(['Floating UI: useFocusTrap() `order` array cannot contain', '\"reference\" while in `modal` mode.'].join(' '));\n    }\n  }\n\n  const getFocusableElements = useCallback(() => {\n    return orderRef.current.map(type => {\n      if (isHTMLElement(refs.reference.current) && type === 'reference') {\n        return refs.reference.current;\n      }\n\n      if (refs.floating.current && type === 'floating') {\n        return refs.floating.current;\n      }\n\n      if (type === 'content') {\n        var _refs$floating$curren, _refs$floating$curren2;\n\n        return Array.from((_refs$floating$curren = (_refs$floating$curren2 = refs.floating.current) == null ? void 0 : _refs$floating$curren2.querySelectorAll(FOCUSABLE_ELEMENT_SELECTOR)) != null ? _refs$floating$curren : []);\n      }\n\n      return null;\n    }).filter(Boolean).flat(); // Ignore `order` dep; only respond to changes on `open`\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refs.floating, refs.reference]); // Focus guard elements\n  // https://github.com/w3c/aria-practices/issues/545\n\n  index(() => {\n    const floating = refs.floating.current;\n\n    if (!enabled || !open || !floating || !modal) {\n      return;\n    }\n\n    function createFocusGuardElement() {\n      const doc = getDocument(floating);\n      const el = doc.createElement('div');\n      el.tabIndex = 0;\n      Object.assign(el.style, {\n        position: 'fixed',\n        outline: '0',\n        pointerEvents: 'none'\n      });\n      el.setAttribute('aria-hidden', 'true');\n      return el;\n    }\n\n    if (!beforeRef.current) {\n      beforeRef.current = createFocusGuardElement();\n    }\n\n    if (!afterRef.current) {\n      afterRef.current = createFocusGuardElement();\n    }\n\n    const before = beforeRef.current;\n    const after = afterRef.current;\n    floating.insertAdjacentElement('beforebegin', before);\n    floating.insertAdjacentElement('afterend', after);\n\n    function onFocus(event) {\n      var _focusableElements;\n\n      stopEvent(event);\n      const focusableElements = getFocusableElements();\n      (_focusableElements = focusableElements[event.target === after ? 0 : focusableElements.length - 1]) == null ? void 0 : _focusableElements.focus();\n    }\n\n    before.addEventListener('focus', onFocus);\n    after.addEventListener('focus', onFocus);\n    return () => {\n      var _before$parentNode, _after$parentNode;\n\n      before.removeEventListener('focus', onFocus);\n      after.removeEventListener('focus', onFocus);\n\n      if ((_before$parentNode = before.parentNode) != null && _before$parentNode.contains(before)) {\n        before.parentNode.removeChild(before);\n      }\n\n      if ((_after$parentNode = after.parentNode) != null && _after$parentNode.contains(after)) {\n        after.parentNode.removeChild(after);\n      }\n    };\n  }, [enabled, open, modal, inert, getFocusableElements, refs.floating]); // Inert\n\n  useEffect(() => {\n    if (!enabled || !open || !inert) {\n      return;\n    }\n\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        stopEvent(event);\n      }\n    }\n\n    const doc = getDocument(refs.floating.current);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [enabled, open, inert, refs.floating]); // Initial focus\n\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const focusableElements = getFocusableElements();\n\n    if (inert) {\n      if (open) {\n        const first = focusableElements[0];\n\n        if (first === refs.floating.current && !first.contains(first.ownerDocument.activeElement)) {\n          focus(first);\n        }\n      }\n\n      return;\n    }\n\n    if (open) {\n      if (typeof initialContentFocus === 'number') {\n        focus(focusableElements[initialContentFocus]);\n      } else if (initialContentFocus.current) {\n        focus(focusableElements.find(element => element === initialContentFocus.current));\n      }\n    }\n  }, [getFocusableElements, open, inert, modal, initialContentFocus, enabled, refs.reference, refs.floating]); // Return focus to reference\n\n  useEffect(() => {\n    if (!enabled || inert) {\n      return;\n    }\n\n    if (!open && modalRef.current && initializedRef.current && isHTMLElement(refs.reference.current)) {\n      focus(refs.reference.current);\n    }\n  }, [open, enabled, inert, modalRef, refs.reference]); // Hide all outside nodes from screen readers\n\n  useEffect(() => {\n    if (!open || !modal || !enabled || !refs.floating.current) {\n      return;\n    }\n\n    return hideOthers(refs.floating.current);\n  }, [open, modal, enabled, refs.floating]);\n  useEffect(() => {\n    initializedRef.current = true;\n    return () => {\n      initializedRef.current = false;\n    };\n  }, []);\n  const tree = useFloatingTree();\n\n  function onBlur(event) {\n    var _refs$floating$curren3;\n\n    const target = event.relatedTarget;\n\n    if (!((_refs$floating$curren3 = refs.floating.current) != null && _refs$floating$curren3.contains(target)) && isElement(refs.reference.current) && !refs.reference.current.contains(target) && !(tree && getChildren(tree, nodeId).some(child => {\n      var _child$context, _child$context$refs$f, _child$context$refs$f2;\n\n      return (_child$context = child.context) == null ? void 0 : (_child$context$refs$f = _child$context.refs.floating) == null ? void 0 : (_child$context$refs$f2 = _child$context$refs$f.current) == null ? void 0 : _child$context$refs$f2.contains(target);\n    }))) {\n      onOpenChange(false);\n    }\n  }\n\n  if (!enabled) {\n    return {};\n  }\n\n  if (modal) {\n    return {\n      floating: {\n        'aria-modal': 'true'\n      }\n    };\n  }\n\n  return {\n    reference: {\n      onBlur\n    },\n    floating: {\n      onBlur\n    }\n  };\n};\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  index(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\n\nfunction findNonDisabledIndex(listRef, _temp) {\n  let {\n    startingIndex = -1,\n    decrement = false\n  } = _temp === void 0 ? {} : _temp;\n  const list = listRef.current;\n  let index = startingIndex;\n\n  do {\n    var _list$index, _list$index2;\n\n    index = index + (decrement ? -1 : 1);\n  } while (index >= 0 && index <= list.length - 1 && (list[index] == null || (_list$index = list[index]) != null && _list$index.hasAttribute('disabled') || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'));\n\n  return index;\n}\n\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n\n    case 'horizontal':\n      return horizontal;\n\n    default:\n      return vertical || horizontal;\n  }\n}\n\nfunction isMainOrientationKey(key, orientation) {\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\n\nfunction isMainOrientationToStartKey(key, orientation, rtl) {\n  const vertical = key === ARROW_UP;\n  const horizontal = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  return doSwitch(orientation, vertical, horizontal);\n}\n\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  const vertical = key === ARROW_DOWN;\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\n\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  const horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\n\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  const horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\n\nfunction getMinIndex(listRef) {\n  return findNonDisabledIndex(listRef);\n}\n\nfunction getMaxIndex(listRef) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length\n  });\n}\n\n/**\n * Adds focus-managed indexed navigation via arrow keys to a list of items\n * within the floating element.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nconst useListNavigation = function (_ref, _temp2) {\n  let {\n    open,\n    onOpenChange,\n    refs\n  } = _ref;\n  let {\n    listRef,\n    activeIndex,\n    onNavigate,\n    enabled = true,\n    selectedIndex = null,\n    allowEscape = false,\n    loop = false,\n    nested = false,\n    rtl = false,\n    virtual = false,\n    focusItemOnOpen = 'auto',\n    focusItemOnHover = true,\n    orientation = 'vertical'\n  } = _temp2 === void 0 ? {\n    listRef: {\n      current: []\n    },\n    activeIndex: null,\n    onNavigate: () => {}\n  } : _temp2;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!loop && allowEscape) {\n      console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));\n    }\n  }\n\n  const parentId = useFloatingParentNodeId();\n  const tree = useFloatingTree();\n  const previousOpen = usePrevious(open);\n  const focusOnOpenRef = useRef(focusItemOnOpen);\n  const indexRef = useRef(selectedIndex != null ? selectedIndex : -1);\n  const keyRef = useRef('');\n  const initializedRef = useRef(false);\n  const onNavigateRef = useLatestRef(onNavigate);\n  const blockPointerLeaveRef = useRef(false);\n  const [activeId, setActiveId] = useState();\n  const focusItem = useCallback((listRef, indexRef) => {\n    if (virtual) {\n      var _listRef$current$inde;\n\n      setActiveId((_listRef$current$inde = listRef.current[indexRef.current]) == null ? void 0 : _listRef$current$inde.id);\n    } else {\n      var _listRef$current$inde2;\n\n      (_listRef$current$inde2 = listRef.current[indexRef.current]) == null ? void 0 : _listRef$current$inde2.focus({\n        preventScroll: true\n      });\n    }\n  }, [virtual]);\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (selectedIndex != null) {\n      indexRef.current = selectedIndex;\n    }\n\n    if (!previousOpen && open && focusOnOpenRef.current) {\n      onNavigateRef.current(indexRef.current);\n      focusItem(listRef, indexRef);\n    }\n  }, [open, previousOpen, selectedIndex, listRef, onNavigateRef, focusItem, enabled]);\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (open) {\n      if (activeIndex === null) {\n        if (!previousOpen && focusOnOpenRef.current && selectedIndex == null || allowEscape) {\n          indexRef.current = allowEscape ? -1 : getMinIndex(listRef);\n          onNavigateRef.current(activeIndex);\n          focusItem(listRef, indexRef);\n        }\n      } else {\n        indexRef.current = activeIndex;\n        onNavigateRef.current(activeIndex);\n        focusItem(listRef, indexRef);\n      }\n    }\n  }, [open, previousOpen, activeIndex, selectedIndex, nested, listRef, onNavigateRef, focusItem, enabled, parentId, allowEscape, refs.floating, tree == null ? void 0 : tree.nodesRef]);\n  index(() => {\n    if (selectedIndex != null || !enabled) {\n      return;\n    }\n\n    if (open) {\n      if (isMainOrientationKey(keyRef.current, orientation) || focusOnOpenRef.current && (keyRef.current === ' ' || keyRef.current === 'Enter')) {\n        const minIndex = getMinIndex(listRef);\n        const maxIndex = getMaxIndex(listRef);\n        indexRef.current = isMainOrientationToStartKey(keyRef.current, orientation, rtl) ? allowEscape ? listRef.current.length : maxIndex : allowEscape ? -1 : minIndex;\n        onNavigateRef.current(indexRef.current);\n        focusItem(listRef, indexRef);\n      }\n    }\n\n    keyRef.current = '';\n  }, [open, listRef, selectedIndex, onNavigateRef, focusItem, enabled, orientation, rtl, allowEscape]);\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (!open && initializedRef.current && selectedIndex != null && isHTMLElement(refs.reference.current)) {\n      refs.reference.current.focus();\n    }\n  }, [refs.reference, selectedIndex, open, enabled]);\n  index(() => {\n    initializedRef.current = true;\n    return () => {\n      initializedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (!open) {\n      var _ref2;\n\n      if (focusItemOnOpen === 'auto') {\n        focusOnOpenRef.current = true;\n      }\n\n      indexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\n      onNavigateRef.current(null);\n    }\n  }, [open, selectedIndex, activeIndex, enabled, focusItemOnOpen, onNavigateRef]);\n\n  function pointerCheck(event) {\n    if (focusItemOnOpen === 'auto') {\n      // undefined or '' depending on the browser\n      focusOnOpenRef.current = !event.pointerType;\n    }\n  }\n\n  function onFloatingKeyDown(event) {\n    blockPointerLeaveRef.current = true;\n\n    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n      stopEvent(event);\n      onOpenChange(false);\n\n      if (isHTMLElement(refs.reference.current)) {\n        refs.reference.current.focus();\n      }\n\n      return;\n    }\n\n    const currentIndex = indexRef.current;\n    const minIndex = getMinIndex(listRef);\n    const maxIndex = getMaxIndex(listRef);\n\n    if (event.key === 'Home') {\n      indexRef.current = minIndex;\n      onNavigate(indexRef.current);\n    }\n\n    if (event.key === 'End') {\n      indexRef.current = maxIndex;\n      onNavigate(indexRef.current);\n    }\n\n    if (isMainOrientationKey(event.key, orientation)) {\n      stopEvent(event);\n\n      if (!virtual && event.currentTarget.ownerDocument.activeElement === event.currentTarget) {\n        indexRef.current = selectedIndex != null ? selectedIndex : isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n        onNavigate(indexRef.current);\n        return;\n      }\n\n      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n        if (loop) {\n          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex\n          });\n        } else {\n          indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex\n          }));\n        }\n      } else {\n        if (loop) {\n          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true\n          });\n        } else {\n          indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true\n          }));\n        }\n      }\n\n      onNavigate(indexRef.current);\n    }\n  }\n\n  if (!enabled) {\n    return {};\n  }\n\n  return {\n    reference: { ...(virtual && open && activeIndex != null && {\n        'aria-activedescendant': activeId\n      }),\n      onPointerEnter: pointerCheck,\n      onPointerDown: pointerCheck,\n\n      onKeyDown(event) {\n        blockPointerLeaveRef.current = true;\n\n        if (virtual && open) {\n          return onFloatingKeyDown(event);\n        }\n\n        if (focusItemOnOpen === 'auto') {\n          focusOnOpenRef.current = true;\n        }\n\n        keyRef.current = event.key;\n\n        if (nested) {\n          if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {\n            stopEvent(event);\n\n            if (open) {\n              indexRef.current = getMinIndex(listRef);\n              onNavigate(indexRef.current);\n            } else {\n              onOpenChange(true);\n            }\n          }\n\n          return;\n        }\n\n        if (isMainOrientationKey(event.key, orientation)) {\n          if (selectedIndex == null) {\n            indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? getMinIndex(listRef) : getMaxIndex(listRef);\n          } else {\n            indexRef.current = selectedIndex;\n          }\n\n          stopEvent(event);\n          onOpenChange(true);\n          onNavigate(indexRef.current);\n        }\n\n        if (virtual && !open) {\n          onFloatingKeyDown(event);\n        }\n      }\n\n    },\n    floating: {\n      'aria-orientation': orientation === 'both' ? undefined : orientation,\n      ...(virtual && activeIndex != null && {\n        'aria-activedescendant': activeId\n      }),\n      onKeyDown: onFloatingKeyDown,\n\n      onPointerMove() {\n        blockPointerLeaveRef.current = false;\n      }\n\n    },\n    item: {\n      onClick: _ref3 => {\n        let {\n          currentTarget\n        } = _ref3;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      },\n      // Safari\n      ...(focusItemOnHover && {\n        onPointerMove(_ref4) {\n          let {\n            currentTarget\n          } = _ref4;\n          const target = currentTarget;\n\n          if (target) {\n            const index = listRef.current.indexOf(target);\n\n            if (index !== -1) {\n              onNavigate(index);\n            }\n          }\n        },\n\n        onPointerLeave() {\n          if (!blockPointerLeaveRef.current) {\n            onNavigate(null);\n\n            if (!virtual) {\n              var _refs$floating$curren;\n\n              (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({\n                preventScroll: true\n              });\n            } else {\n              indexRef.current = -1;\n              focusItem(listRef, indexRef);\n            }\n          }\n        }\n\n      })\n    }\n  };\n};\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nconst useTypeahead = function (_ref, _temp) {\n  var _ref2;\n\n  let {\n    open,\n    dataRef\n  } = _ref;\n  let {\n    listRef,\n    activeIndex,\n    onMatch = () => {},\n    enabled = true,\n    findMatch = null,\n    resetMs = 1000,\n    ignoreKeys = [],\n    selectedIndex = null\n  } = _temp === void 0 ? {\n    listRef: {\n      current: []\n    },\n    activeIndex: null\n  } : _temp;\n  const timeoutIdRef = useRef();\n  const stringRef = useRef('');\n  const prevIndexRef = useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);\n  const matchIndexRef = useRef(null);\n  index(() => {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(() => {\n    // Sync arrow key navigation but not typeahead navigation\n    if (open && stringRef.current === '') {\n      var _ref3;\n\n      prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n\n  function onKeyDown(event) {\n    if (!event.currentTarget.contains(getDocument(event.currentTarget).activeElement)) {\n      return;\n    }\n\n    if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n      dataRef.current.typing = true;\n\n      if (event.key === ' ') {\n        stopEvent(event);\n      }\n    }\n\n    const listContent = listRef.current;\n\n    if (listContent == null || ['Home', 'End', 'Escape', 'Enter', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ...ignoreKeys].includes(event.key)) {\n      return;\n    } // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n    // allow it in this case, too.\n\n\n    const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\n      var _text$, _text$2;\n\n      return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n    }); // Allows the user to cycle through items that start with the same letter\n    // in rapid succession\n\n    if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n    }\n\n    stringRef.current += event.key;\n    clearTimeout(timeoutIdRef.current);\n    timeoutIdRef.current = setTimeout(() => {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n      dataRef.current.typing = false;\n    }, resetMs);\n    const prevIndex = prevIndexRef.current;\n    const orderedList = [...listContent.slice((prevIndex != null ? prevIndex : 0) + 1), ...listContent.slice(0, (prevIndex != null ? prevIndex : 0) + 1)];\n    const str = findMatch ? findMatch(orderedList, stringRef.current) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current)) === 0);\n    const index = str ? listContent.indexOf(str) : -1;\n\n    if (index !== -1) {\n      onMatch(index);\n      matchIndexRef.current = index;\n    }\n  }\n\n  if (!enabled) {\n    return {};\n  }\n\n  return {\n    reference: {\n      onKeyDown\n    },\n    floating: {\n      onKeyDown\n    }\n  };\n};\n\nfunction useFloating(_temp) {\n  let {\n    open = false,\n    onOpenChange = () => {},\n    placement,\n    middleware,\n    strategy,\n    nodeId\n  } = _temp === void 0 ? {} : _temp;\n  const tree = useFloatingTree();\n  const dataRef = useRef({});\n  const events = useState(() => createPubSub())[0];\n  const floating = useFloating$1({\n    placement,\n    middleware,\n    strategy\n  });\n  const context = useMemo(() => ({ ...floating,\n    dataRef,\n    nodeId,\n    events,\n    open,\n    onOpenChange\n  }), [floating, dataRef, nodeId, events, open, onOpenChange]);\n  index(() => {\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\n\n    if (node) {\n      node.context = context;\n    }\n  });\n  return useMemo(() => ({\n    context,\n    ...floating\n  }), [floating, context]);\n}\n\nexport { FloatingDelayGroup, FloatingFocusManager, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, safePolygon, useClick, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingTree, useFocus, useFocusTrap, useHover, useId, useInteractions, useListNavigation, useRole, useTypeahead };\n", "function getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n    strategy\n  }) : rects[elementContext]); // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    const clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside of the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n    return {\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n\n    async fn(middlewareArguments) {\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nfunction convertValueToCoords(placement, rects, value, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value({ ...rects,\n    placement\n  }) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const diffCoords = convertValueToCoords(placement, rects, value, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        height: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        width: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      const prevDimensions = await platform.getDimensions(elements.floating);\n      apply == null ? void 0 : apply({ ...dimensions,\n        ...rects\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (prevDimensions.width !== nextDimensions.width || prevDimensions.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n", "import { computePosition, arrow as arrow$1 } from '@floating-ui/dom';\nexport * from '@floating-ui/dom';\nimport { useLayoutEffect, useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { flushSync } from 'react-dom';\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\n// @ts-nocheck\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n\n  let length, i, keys;\n\n  if (a && b && typeof a == 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    keys = Object.keys(a);\n    length = keys.length;\n\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n\nfunction useFloating(_temp) {\n  let {\n    middleware,\n    placement = 'bottom',\n    strategy = 'absolute'\n  } = _temp === void 0 ? {} : _temp;\n  const reference = useRef(null);\n  const floating = useRef(null);\n  const [data, setData] = useState({\n    // Setting these to `null` will allow the consumer to determine if\n    // `computePosition()` has run yet\n    x: null,\n    y: null,\n    strategy,\n    placement,\n    middlewareData: {}\n  });\n  const [latestMiddleware, setLatestMiddleware] = useState(middleware);\n\n  if (!deepEqual(latestMiddleware == null ? void 0 : latestMiddleware.map(_ref => {\n    let {\n      options\n    } = _ref;\n    return options;\n  }), middleware == null ? void 0 : middleware.map(_ref2 => {\n    let {\n      options\n    } = _ref2;\n    return options;\n  }))) {\n    setLatestMiddleware(middleware);\n  }\n\n  const isMountedRef = useRef(true);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  const update = useCallback(() => {\n    if (!reference.current || !floating.current) {\n      return;\n    }\n\n    computePosition(reference.current, floating.current, {\n      middleware: latestMiddleware,\n      placement,\n      strategy\n    }).then(data => {\n      if (isMountedRef.current) {\n        flushSync(() => {\n          setData(data);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy]);\n  index(update, [update]);\n  const setReference = useCallback(node => {\n    reference.current = node;\n    update();\n  }, [update]);\n  const setFloating = useCallback(node => {\n    floating.current = node;\n    update();\n  }, [update]);\n  const refs = useMemo(() => ({\n    reference,\n    floating\n  }), []);\n  return useMemo(() => ({ ...data,\n    update,\n    refs,\n    reference: setReference,\n    floating: setFloating\n  }), [data, update, refs, setReference, setFloating]);\n}\nconst arrow = options => {\n  const {\n    element,\n    padding\n  } = options;\n\n  function isRef(value) {\n    return Object.prototype.hasOwnProperty.call(value, 'current');\n  }\n\n  return {\n    name: 'arrow',\n    options,\n\n    fn(args) {\n      if (isRef(element)) {\n        if (element.current != null) {\n          return arrow$1({\n            element: element.current,\n            padding\n          }).fn(args);\n        }\n\n        return {};\n      } else if (element) {\n        return arrow$1({\n          element,\n          padding\n        }).fn(args);\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, useFloating };\n", "import{createElement as r}from\"react\";import m from\"htm\";var o=m.bind(r);export{o as html};\n", "var n=function(t,s,r,e){var u;s[0]=0;for(var h=1;h<s.length;h++){var p=s[h++],a=s[h]?(s[0]|=p?1:2,r[s[h++]]):s[++h];3===p?e[0]=a:4===p?e[1]=Object.assign(e[1]||{},a):5===p?(e[1]=e[1]||{})[s[++h]]=a:6===p?e[1][s[++h]]+=a+\"\":p?(u=t.apply(a,n(t,a,r,[\"\",null])),e.push(u),a[0]?s[0]|=2:(s[h-2]=0,s[h]=u)):e.push(a)}return e},t=new Map;export default function(s){var r=t.get(this);return r||(r=new Map,t.set(this,r)),(r=n(this,r.get(s)||(r.set(s,r=function(n){for(var t,s,r=1,e=\"\",u=\"\",h=[0],p=function(n){1===r&&(n||(e=e.replace(/^\\s*\\n\\s*|\\s*\\n\\s*$/g,\"\")))?h.push(0,n,e):3===r&&(n||e)?(h.push(3,n,e),r=2):2===r&&\"...\"===e&&n?h.push(4,n,0):2===r&&e&&!n?h.push(5,0,!0,e):r>=5&&((e||!n&&5===r)&&(h.push(r,0,e,s),r=6),n&&(h.push(r,n,0,s),r=6)),e=\"\"},a=0;a<n.length;a++){a&&(1===r&&p(),p(a));for(var l=0;l<n[a].length;l++)t=n[a][l],1===r?\"<\"===t?(p(),h=[h],r=3):e+=t:4===r?\"--\"===e&&\">\"===t?(r=1,e=\"\"):e=t+e[0]:u?t===u?u=\"\":e+=t:'\"'===t||\"'\"===t?u=t:\">\"===t?(p(),r=1):r&&(\"=\"===t?(r=5,s=e,e=\"\"):\"/\"===t&&(r<5||\">\"===n[a][l+1])?(p(),3===r&&(h=h[0]),r=h,(h=h[0]).push(2,0,r),r=0):\" \"===t||\"\\t\"===t||\"\\n\"===t||\"\\r\"===t?(p(),r=2):e+=t),3===r&&\"!--\"===e&&(r=4,h=h[0])}return p(),h}(s)),r),arguments,[])).length>1?r:r[0]}\n", "/**\n * @typedef {import('./types.js').VibeKanbanWebCompanion} Props\n * @typedef {import('./types.js').Coords} Coords\n */\n\nimport { FloatingPortal } from '@floating-ui/react-dom-interactions'\nimport { html } from 'htm/react'\nimport * as React from 'react'\n\n\nimport { getDisplayNameForInstance } from './getDisplayNameFromReactInstance.js'\nimport { getPathToSource } from './getPathToSource.js'\nimport { getPropsForInstance } from './getPropsForInstance.js'\nimport { getReactInstancesForElement } from './getReactInstancesForElement.js'\nimport { getSourceForInstance } from './getSourceForInstance.js'\nimport { getUrl } from './getUrl.js'\n\nexport const State = /** @type {const} */ ({\n  IDLE: 'IDLE',\n  HOVER: 'HOVER',\n  SELECT: 'SELECT',\n})\n\nexport const Trigger = /** @type {const} */ ({\n  ALT_KEY: 'alt-key',\n  BUTTON: 'button',\n})\n\n// Message source and version for iframe communication\nconst MESSAGE_SOURCE = 'click-to-component'\nconst MESSAGE_VERSION = 1\n\n/**\n * Extract component instances data for a target element\n * @param {HTMLElement} target\n * @param {import('./types.js').PathModifier} pathModifier\n * @returns {Array}\n */\nfunction getComponentInstances(target, pathModifier) {\n  if (!target) return []\n\n  const instances = getReactInstancesForElement(target).filter((instance) =>\n    getSourceForInstance(instance)\n  )\n\n  return instances.map((instance) => {\n    const name = getDisplayNameForInstance(instance)\n    const source = getSourceForInstance(instance)\n    const path = getPathToSource(source, pathModifier)\n    const props = getPropsForInstance(instance)\n\n    return {\n      name,\n      props,\n      source: {\n        fileName: source.fileName,\n        lineNumber: source.lineNumber,\n        columnNumber: source.columnNumber\n      },\n      pathToSource: path\n    }\n  })\n}\n\n/**\n * Send a message to the parent window when opening in editor.\n * No-ops when not inside an iframe.\n * @param {Object} args\n * @param {string} args.editor\n * @param {string} args.pathToSource\n * @param {string} args.url\n * @param {'alt-click'|'context-menu'} args.trigger\n * @param {MouseEvent} [args.event]\n * @param {HTMLElement} [args.element]\n * @param {import('./types.js').PathModifier} [args.pathModifier]\n * @param {string} [args.selectedComponent] - Name of the selected component\n */\nfunction postOpenToParent({ editor, pathToSource, url, trigger, event, element, pathModifier, selectedComponent }) {\n  try {\n    const el = element || (event && event.target instanceof HTMLElement ? event.target : null)\n\n    // Get all component instances for the clicked element\n    const allComponents = el ? getComponentInstances(el, pathModifier) : []\n\n    // Find the selected component in the list (or use the first one)\n    const selected = selectedComponent\n      ? allComponents.find(comp => comp.name === selectedComponent)\n      : allComponents.find(comp => comp.pathToSource === pathToSource) || allComponents[0]\n\n    const elementInfo = el\n      ? {\n        tag: el.tagName?.toLowerCase?.() || undefined,\n        id: el.id || undefined,\n        className:\n          typeof el.className === 'string'\n            ? el.className\n            : String(el.className || ''),\n        role: el.getAttribute('role') || undefined,\n        dataset: { ...el.dataset },\n      }\n      : undefined\n\n    const message = {\n      source: MESSAGE_SOURCE,\n      version: MESSAGE_VERSION,\n      type: 'open-in-editor',\n      payload: {\n        selected: selected ? {\n          editor,\n          pathToSource: selected.pathToSource,\n          url,\n          name: selected.name,\n          props: selected.props,\n          source: selected.source\n        } : {\n          editor,\n          pathToSource,\n          url,\n          name: selectedComponent || 'Unknown',\n          props: {},\n          source: {}\n        },\n        components: allComponents,\n        trigger,\n        coords: event\n          ? { x: event.clientX ?? undefined, y: event.clientY ?? undefined }\n          : undefined,\n        clickedElement: elementInfo,\n      },\n    }\n\n    if (\n      typeof window !== 'undefined' &&\n      window.parent &&\n      window.parent !== window &&\n      typeof window.parent.postMessage === 'function'\n    ) {\n      window.parent.postMessage(message, '*') // dev-only, permissive\n    }\n  } catch (err) {\n    // Never break product flows due to messaging\n    console.warn('[click-to-component] postMessage failed', err)\n  }\n}\n\n/**\n * @param {Props} props\n */\nexport function VibeKanbanWebCompanion() {\n  const editor = 'vscode' // legacy\n  const pathModifier = (path) => path // legacy\n  const [state, setState] = React.useState(\n    /** @type {State[keyof State]} */\n    (State.IDLE)\n  )\n\n  const [trigger, setTrigger] = React.useState(\n    /** @type {Trigger[keyof Trigger] | null} */\n    (null)\n  )\n\n  const [target, setTarget] = React.useState(\n    /** @type {HTMLElement | null} */\n    (null)\n  )\n\n  const [isFramed, setIsFramed] = React.useState(false)\n\n\n\n  const vkIcon = `<svg width=\"435\" height=\"257\" viewBox=\"0 0 435 257\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M51.4385 19.4795H68.8164V136.314H76.6152V155.719H93.9932V181.729H126.59V136.314H151.766V0.0751953H202.498V19.4795H219.876V165.677H194.699V211.091H169.522V256.505H58.8584V229.616H51.0596V211.091H33.6816V184.201H25.8828V165.677H8.50488V138.788H0.707031V0.0751953H51.4385V19.4795ZM291.169 19.4795H308.548V90.9014H341.143V45.4883H366.319V0.0751953H417.051V19.4795H434.43V74.8506H409.253V120.264H384.077V136.314H391.874V155.719H409.253V181.729H417.051V201.133H434.43V256.505H374.12V229.616H366.319V184.201H341.143V165.677H308.548V256.505H248.235V229.616H240.438V0.0751953H291.169V19.4795ZM202.498 26.0293H213.326V159.127H188.149V204.541H162.973V249.954H65.4082V229.616H62.2666V253.094H166.114V207.683H191.291V162.27H216.468V22.8877H202.498V26.0293ZM301.998 249.954H254.785V229.616H251.644V253.094H305.137V162.27H341.143V159.127H301.998V249.954ZM417.051 207.683H427.88V249.954H380.67V229.616H377.527V253.094H431.022V204.541H417.051V207.683ZM202.498 138.788H177.321V184.201H152.145V229.616H68.8164V246.544H159.564V201.133H184.741V155.719H209.918V29.4375H202.498V138.788ZM291.169 229.616H258.194V246.544H298.589V155.719H341.143V138.788H291.169V229.616ZM417.051 229.616H384.077V246.544H424.473V211.091H417.051V229.616ZM37.0898 207.683H51.0596V204.541H40.2324V184.201H37.0898V207.683ZM43.6396 201.133H51.0596V184.201H43.6396V201.133ZM76.6152 181.729H84.0352V165.677H76.6152V181.729ZM76.6152 162.27H87.4434V181.729H90.585V159.127H76.6152V162.27ZM391.874 181.729H399.297V165.677H391.874V181.729ZM391.874 162.27H402.703V181.729H405.847V159.127H391.874V162.27ZM11.9131 162.27H25.8828V159.127H15.0547V138.788H11.9131V162.27ZM18.4639 155.719H25.8828V138.788H18.4639V155.719ZM51.4385 136.314H58.8584V29.4375H51.4385V136.314ZM51.4385 26.0293H62.2666V136.314H65.4082V22.8877H51.4385V26.0293ZM417.051 47.9609H391.874V93.375H366.697V136.314H374.12V110.306H399.297V64.8926H424.473V29.4375H417.051V47.9609ZM417.051 26.0293H427.88V68.3008H402.703V113.714H377.527V136.314H380.67V116.855H405.847V71.4424H431.022V22.8877H417.051V26.0293ZM291.169 90.9014H298.589V29.4375H291.169V90.9014ZM291.169 26.0293H301.998V90.9014H305.137V22.8877H291.169V26.0293Z\" fill=\"black\"/>\n</svg>`;\n\n  const TargetButton = React.useCallback(\n    ({ active, onToggle }) => html`\n      <button\n        onClick=${function handleButtonClick(e) {\n        e.stopPropagation()\n        onToggle()\n      }}\n        aria-pressed=${active}\n        style=${{\n        position: 'fixed',\n        bottom: '16px',\n        right: '16px',\n        width: '48px',\n        height: '48px',\n        borderRadius: '50%',\n        background: active ? 'royalblue' : 'white',\n        color: active ? 'white' : 'black',\n        border: '1px solid #ccc',\n        boxShadow: '0 2px 6px rgba(0,0,0,.3)',\n        zIndex: 2147483647,\n        cursor: 'pointer',\n        fontSize: '18px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '8px',\n      }}\n        title=\"Toggle targeting mode\"\n      >\n        <img\n          src=${'data:image/svg+xml;utf8,' + encodeURIComponent(vkIcon)}\n          alt=\"VK Icon\"\n          style=${{\n        width: '32px',\n        height: '32px',\n        filter: active ? 'brightness(0) invert(1)' : 'none',\n      }}\n        />\n      </button>\n    `,\n    []\n  )\n\n  const toggleTargeting = React.useCallback(() => {\n    if (state === State.HOVER && trigger === Trigger.BUTTON) {\n      setState(State.IDLE)\n      setTrigger(null)\n    } else {\n      setState(State.HOVER)\n      setTrigger(Trigger.BUTTON)\n    }\n  }, [state, trigger])\n\n  const onContextMenu = React.useCallback(\n    function handleContextMenu(\n      /**\n       * @type {MouseEvent}\n       */\n      event\n    ) {\n      // Only interfere when the tool is active\n      if (state !== State.IDLE && event.target instanceof HTMLElement) {\n        event.preventDefault()\n\n        // Optional: notify the parent for visualization\n        postOpenToParent({\n          editor,\n          pathToSource: '',\n          url: '',\n          trigger: 'context-menu',\n          event,\n          element: event.target,\n          pathModifier\n        })\n      }\n    },\n    [state, editor, pathModifier]\n  )\n\n  const onClick = React.useCallback(\n    function handleClick(\n      /**\n       * @type {MouseEvent}\n       */\n      event\n    ) {\n      // Prevent all default actions when targeting is active\n      if (state === State.HOVER) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n\n      // Handle targeting mode click (left-click sends message to parent)\n      if (state === State.HOVER && trigger === Trigger.BUTTON && target instanceof HTMLElement) {\n\n        // Notify parent window with component info\n        postOpenToParent({\n          editor,\n          pathToSource: '', // Will be determined when user selects\n          url: '',\n          trigger: 'context-menu',\n          event,\n          element: target,\n          pathModifier,\n        })\n\n        setState(State.IDLE)\n        setTrigger(null)\n        return\n      }\n\n      // Handle Alt+click mode (use postMessage instead of navigation)\n      if (state === State.HOVER && trigger === Trigger.ALT_KEY && target instanceof HTMLElement) {\n        const instance = getReactInstancesForElement(target).find((instance) =>\n          getSourceForInstance(instance)\n        )\n\n        if (!instance) {\n          return console.warn(\n            'Could not find React instance for element',\n            target\n          )\n        }\n\n        const source = getSourceForInstance(instance)\n\n        if (!source) {\n          return console.warn(\n            'Could not find source for React instance',\n            instance\n          )\n        }\n        const path = getPathToSource(source, pathModifier)\n        const url = getUrl({\n          editor,\n          pathToSource: path,\n        })\n\n        event.preventDefault()\n\n        // Use postMessage instead of direct navigation\n        postOpenToParent({\n          editor,\n          pathToSource: path,\n          url,\n          trigger: 'alt-click',\n          event,\n          element: target,\n          pathModifier\n        })\n\n        setState(State.IDLE)\n        setTrigger(null)\n      }\n    },\n    [editor, pathModifier, state, trigger, target]\n  )\n\n\n\n  const onKeyDown = React.useCallback(\n    function handleKeyDown(\n      /**\n       * @type {KeyboardEvent}\n       */\n      event\n    ) {\n      switch (state) {\n        case State.IDLE:\n          if (event.altKey) {\n            setState(State.HOVER)\n            setTrigger(Trigger.ALT_KEY)\n          }\n          break\n\n        case State.HOVER:\n          if (event.key === 'Escape' && trigger === Trigger.BUTTON) {\n            setState(State.IDLE)\n            setTrigger(null)\n          }\n          break\n\n        default:\n      }\n    },\n    [state, trigger]\n  )\n\n  const onKeyUp = React.useCallback(\n    function handleKeyUp(\n      /**\n       * @type {KeyboardEvent}\n       */\n      event\n    ) {\n      switch (state) {\n        case State.HOVER:\n          if (trigger === Trigger.ALT_KEY) {\n            setState(State.IDLE)\n            setTrigger(null)\n          }\n          break\n\n        default:\n      }\n    },\n    [state, trigger]\n  )\n\n  const onMouseMove = React.useCallback(\n    function handleMouseMove(\n      /** @type {MouseEvent} */\n      event\n    ) {\n      if (!(event.target instanceof HTMLElement)) {\n        return\n      }\n\n      switch (state) {\n        case State.IDLE:\n        case State.HOVER:\n          setTarget(event.target)\n          break\n\n        default:\n          break\n      }\n    },\n    [state]\n  )\n\n  const onBlur = React.useCallback(\n    function handleBlur() {\n      switch (state) {\n        case State.HOVER:\n          setState(State.IDLE)\n          setTrigger(null)\n          break\n\n        default:\n      }\n    },\n    [state]\n  )\n\n  React.useEffect(\n    function toggleIndicator() {\n      for (const element of Array.from(\n        document.querySelectorAll('[data-click-to-component-target]')\n      )) {\n        if (element instanceof HTMLElement) {\n          delete element.dataset.clickToComponentTarget\n        }\n      }\n\n      if (state === State.IDLE) {\n        delete window.document.body.dataset.clickToComponent\n        window.document.body.style.removeProperty('--click-to-component-cursor')\n        if (target) {\n          delete target.dataset.clickToComponentTarget\n        }\n        return\n      }\n\n      if (target instanceof HTMLElement) {\n        window.document.body.dataset.clickToComponent = state\n        target.dataset.clickToComponentTarget = state\n\n        // Set cursor to crosshair for targeting\n        window.document.body.style.setProperty(\n          '--click-to-component-cursor',\n          'crosshair'\n        )\n      }\n    },\n    [state, target, trigger]\n  )\n\n  // Detect if running in iframe\n  React.useEffect(function detectIframe() {\n    if (typeof window === 'undefined') return\n    try {\n      setIsFramed(window.self !== window.top)\n    } catch {\n      // Accessing window.top can throw in sandboxed contexts; assume framed\n      setIsFramed(true)\n    }\n  }, [])\n\n  // Send ready message to parent when component mounts\n  React.useEffect(function sendReadyMessage() {\n    if (\n      typeof window !== 'undefined' &&\n      window.parent &&\n      window.parent !== window &&\n      typeof window.parent.postMessage === 'function'\n    ) {\n      try {\n        window.parent.postMessage(\n          {\n            source: MESSAGE_SOURCE,\n            version: MESSAGE_VERSION,\n            type: 'ready'\n          },\n          '*'\n        )\n      } catch (err) {\n        console.warn('[click-to-component] ready message failed', err)\n      }\n    }\n  }, [])\n\n  React.useEffect(\n    function addEventListenersToWindow() {\n      window.addEventListener('click', onClick, { capture: true })\n      window.addEventListener('contextmenu', onContextMenu, { capture: true })\n      window.addEventListener('keydown', onKeyDown)\n      window.addEventListener('keyup', onKeyUp)\n      window.addEventListener('mousemove', onMouseMove)\n      window.addEventListener('blur', onBlur)\n\n      return function removeEventListenersFromWindow() {\n        window.removeEventListener('click', onClick, { capture: true })\n        window.removeEventListener('contextmenu', onContextMenu, {\n          capture: true,\n        })\n        window.removeEventListener('keydown', onKeyDown)\n        window.removeEventListener('keyup', onKeyUp)\n        window.removeEventListener('mousemove', onMouseMove)\n        window.removeEventListener('blur', onBlur)\n      }\n    },\n    [onClick, onContextMenu, onKeyDown, onKeyUp, onMouseMove, onBlur]\n  )\n\n  return html`\n    <style key=\"click-to-component-style\">\n      [data-click-to-component] * {\n        pointer-events: auto !important;\n      }\n\n      [data-click-to-component-target] {\n        cursor: var(--click-to-component-cursor, crosshair) !important;\n        outline: auto 1px;\n        outline: var(\n          --click-to-component-outline,\n          -webkit-focus-ring-color auto 1px\n        ) !important;\n      }\n    </style>\n\n    ${isFramed && html`\n      <${FloatingPortal} key=\"click-to-component-portal\">\n        <${TargetButton}\n          key=\"click-to-component-target-button\"\n          active=${state === State.HOVER && trigger === Trigger.BUTTON}\n          onToggle=${toggleTargeting}\n        />\n      </${FloatingPortal}>\n    `}\n  `\n}\n", "/**\n * @typedef {import('react-reconciler').Fiber} Fiber\n * @param {Fiber} instance\n */\nexport function getDisplayNameForInstance(instance) {\n  const { elementType, tag } = instance\n\n  // https://github.com/facebook/react/blob/7c8e5e7ab8bb63de911637892392c5efd8ce1d0f/packages/react-reconciler/src/ReactWorkTags.js\n  switch (tag) {\n    case 0: // FunctionComponent\n    case 1: // ClassComponent\n      return (\n        elementType.displayName || elementType.name || 'Anonymous Component'\n      )\n\n    case 3:\n      return 'HostRoot'\n\n    case 4:\n      return 'HostPortal'\n\n    case 5: // HostComponent:\n      return elementType\n\n    case 6: // HostText:\n      return 'String'\n\n    case 7: // Fragment\n      return 'React.Fragment'\n\n    case 8:\n      return 'Mode'\n\n    case 9: // ContextConsumer\n      return 'Context.Consumer'\n\n    case 10: // ContextProvider\n      return 'Context.Provider'\n\n    case 11: // ForwardRef\n      return 'React.forwardRef'\n\n    case 12:\n      return 'Profiler'\n\n    case 13:\n      return 'SuspenseComponent'\n\n    case 14:\n      return 'MemoComponent'\n\n    case 15: // SimpleMemoComponent\n      // Attempt to get name from wrapped component\n      return elementType.type.name ?? 'MemoComponent'\n\n    case 16: // LazyComponent\n      return 'React.lazy'\n\n    case 17:\n      return 'IncompleteClassComponent'\n\n    case 18:\n      return 'DehydratedFragment'\n\n    case 19:\n      return 'SuspenseListComponent'\n\n    case 21:\n      return 'ScopeComponent'\n\n    case 22:\n      return 'OffscreenComponent'\n\n    case 23:\n      return 'LegacyHiddenComponent'\n\n    case 24:\n      return 'CacheComponent'\n\n    // @ts-expect-error Type '25' is not comparable to type 'WorkTag'.ts(2678)\n    case 25:\n      return 'TracingMarkerComponent'\n\n    // @ts-expect-error Type '26' is not comparable to type 'WorkTag'.ts(2678)\n    case 26:\n      return 'HostHoistable'\n\n    // @ts-expect-error Type '27' is not comparable to type 'WorkTag'.ts(2678)\n    case 27:\n      return 'HostSingleton'\n\n    // @ts-expect-error Type '28' is not comparable to type 'WorkTag'.ts(2678)\n    case 28:\n      return 'IncompleteFunctionComponent'\n\n    // @ts-expect-error Type '29' is not comparable to type 'WorkTag'.ts(2678)\n    case 29:\n      return 'Throw'\n\n    default:\n      console.warn(`Unrecognized React Fiber tag: ${tag}`, instance)\n      return 'Unknown Component'\n  }\n}\n", "/**\n * @typedef {import('react-reconciler').Source} Source\n * @typedef {import('./types').PathModifier} PathModifier\n */\n\n/**\n * @param {Source} source\n * @param {PathModifier} pathModifier\n */\nexport function getPathToSource(source, pathModifier) {\n  const {\n    // It _does_ exist!\n    // @ts-ignore Property 'columnNumber' does not exist on type 'Source'.ts(2339)\n    columnNumber = 1,\n    fileName,\n    lineNumber = 1,\n  } = source\n\n  let path = `${fileName}:${lineNumber}:${columnNumber}`\n  if (pathModifier) {\n    path = pathModifier(path)\n  }\n\n  return path\n}\n", "/**\n * @typedef {import('react-reconciler').Fiber} Fiber\n */\n\n/**\n * @param {Fiber} instance\n */\n\nexport function getPropsForInstance(instance) {\n  /**\n   * @type {Fiber['pendingProps']}\n   */\n  const props = {}\n\n  Object.entries(instance.memoizedProps).forEach(([key, value]) => {\n    const type = typeof value\n\n    // Ignore some values, even if they're scalar, because they're not unique enough\n    if (['key'].includes(key) || value === instance.type.defaultProps?.[key]) {\n      return\n    }\n\n    // Scalar values\n    if (\n      ['string', 'number', 'boolean', 'symbol'].includes(type) ||\n      value instanceof String ||\n      value instanceof Number ||\n      value instanceof Boolean ||\n      value instanceof Symbol\n    ) {\n      props[key] = value\n    }\n  })\n\n  return props\n}\n", "/**\n * @param {HTMLElement} element\n */\nexport function getReactInstanceForElement(element) {\n  // Prefer React DevTools, which has direct access to `react-dom` for mapping `element` <=> Fiber\n  if ('__REACT_DEVTOOLS_GLOBAL_HOOK__' in window) {\n    // @ts-expect-error - TS2339 - Property '__REACT_DEVTOOLS_GLOBAL_HOOK__' does not exist on type 'Window & typeof globalThis'.\n    const { renderers } = window.__REACT_DEVTOOLS_GLOBAL_HOOK__\n\n    for (const renderer of renderers.values()) {\n      try {\n        const fiber = renderer.findFiberByHostInstance(element)\n\n        if (fiber) {\n          return fiber\n        }\n      } catch (e) {\n        // If React is mid-render, references to previous nodes may disappear during the click events\n        // (This is especially true for interactive elements, like menus)\n      }\n    }\n  }\n\n  if ('_reactRootContainer' in element) {\n    // @ts-expect-error - TS2339 - Property '_reactRootContainer' does not exist on type 'HTMLElement'.\n    return element._reactRootContainer._internalRoot.current.child\n  }\n\n  // eslint-disable-next-line guard-for-in\n  for (const key in element) {\n    // Pre-Fiber access React internals\n    if (key.startsWith('__reactInternalInstance$')) {\n      return element[key]\n    }\n\n    // Fiber access to React internals\n    if (key.startsWith('__reactFiber')) {\n      return element[key]\n    }\n  }\n}\n", "/**\n * @typedef {import('react-reconciler').Fiber} Fiber\n */\n\nimport { getReactInstanceForElement } from './getReactInstanceForElement.js'\n\nexport function getReactInstancesForElement(\n  /** @type {HTMLElement} */\n  element\n) {\n  /** @type {Set<Fiber>} */\n  const instances = new Set()\n  let instance = getReactInstanceForElement(element)\n\n  while (instance) {\n    instances.add(instance)\n\n    instance = instance._debugOwner\n  }\n\n  return Array.from(instances)\n}\n", "/**\n * @typedef {import('react-reconciler').Fiber} Fiber\n * @typedef {import('react-reconciler').Source} Source\n */\n\n/**\n * @param {Fiber} instance\n */\nexport function getSourceForInstance(instance) {\n  if (!instance._debugSource) {\n    return\n  }\n\n  const {\n    // It _does_ exist!\n    // @ts-ignore Property 'columnNumber' does not exist on type 'Source'.ts(2339)\n    columnNumber = 1,\n    fileName,\n    lineNumber = 1,\n  } = instance._debugSource\n\n  return { columnNumber, fileName, lineNumber }\n}\n", "/**\n * @param {Object} param\n * @param {string} param.editor\n * @param {string} param.pathToSource\n */\nexport function getUrl({ editor, pathToSource }) {\n  // Fix https://github.com/microsoft/vscode/issues/197319\n  if (pathToSource[0] === '/') {\n    return `${editor}://file${pathToSource}`\n  }\n\n  return `${editor}://file/${pathToSource}`\n}\n", "import { VibeKanbanWebCompanion as Component } from './VibeKanbanWebCompanion.js'\n\nexport const VibeKanbanWebCompanion =\n  process.env.NODE_ENV === 'development' ? Component : () => null\n"],
  "mappings": "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",
  "names": ["pointInPolygon", "import_react", "import_react_dom", "FloatingOverlay", "React__default", "FocusGuard", "React__default", "import_react", "t", "r", "n", "s", "r", "React", "instance", "VibeKanbanWebCompanion"]
}
